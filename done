# UTS-PBO-1
UTS PBO soal 1

import java.util.Scanner;
public class Algebra{

  public static void main(String[] Strings) {

        Scanner input = new Scanner(System.in);

            System.out.print("Input a, b, c: ");
            double a = input.nextDouble();
            double b = input.nextDouble();
            double c = input.nextDouble();
            double result = b * b - 4.0 * a * c;

            if (result > 0.0) {
                double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a);
                double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a);
                System.out.println("The roots are " + r1 + " and " + r2);
            } else if (result == 0.0) {
                double r1 = -b / (2.0 * a);
                System.out.println("The root is " + r1);
            } else {
                System.out.println("The equation has no real roots.");
            }
    }
}

# UTS-PBO-1
UTS PBO soal 2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UTSPBONOMER2
{
        public class RetailItem
        {
            private String description;
            private int unitsOnHand;
            private double price;

            public void setDescription(String userDescription)
            {
                description = userDescription;
            }

            public void setUnitsOnHand(int userUnitsOnHand)
            {
                unitsOnHand = userUnitsOnHand;
            }

            public void setPrice(double userPrice)
            {
                price = userPrice;
            }

            public String getDescription()
            {
                return description;
            }
            public int getUnitsOnHand()
            {
                return unitsOnHand;
            }

            public Double getPrice()
            {
                return price;
            }

            public RetailItem(String descriptionGiven, int unitsOnHandGiven, double priceGiven)
            {
                description = descriptionGiven;
                unitsOnHand = unitsOnHandGiven;
                price = priceGiven;
            }
        }
    
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace UTSPBONOMER2
{
    class Program
    {
        static void Main(string[] args)
        {
            RetailItem[] item = new RetailItem[3];

            item[0] = new RetailItem("Jacket", 12, 59.95);
            item[1] = new RetailItem("Jeans", 40, 34.95);
            item[2] = new RetailItem("Shirt", 20, 24.95);

            Console.WriteLine("=============================================");
            Console.WriteLine("\tDescription\tUnits On Hand\tPrice");
            Console.WriteLine("=============================================");
            for (int i = 0; i < item.Length; i++)
            {
                Console.WriteLine("Item " + (i + 1) + "\t" + item[i].getDescription() + "\t\t" + item[i].getUnitsOnHand() + "\t\t" + item[i].getPrice());
            }
            Console.WriteLine("=============================================");
            Console.ReadKey();
        }
    }
}

# UTS-PBO-1
UTS PBO soal 3

package utspbocobanomer3;

import java.awt.HeadlessException;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;


public class Main { 

    public static abstract class BankAccount { 
        protected double balance; 
        protected int numberOfDeposits; 
        protected int numberOfWithdrawals; 
        protected double annualInterest; 
        protected double monthlyCharge; 

// Constructor accepts annual interest and 
// the balance. 
    public BankAccount(double balance, double annualInterest) { 
        this.setAnnualInterest(annualInterest);
        this.setBalance(balance); 
    } 
// Default constructor. 
    public BankAccount() {} 

// Monthly charge process.  
    public void monthlyProcess() { 
        this.balance -= this.monthlyCharge; 
        this.calcInterest(); 
        this.monthlyCharge = 0; 
        this.numberOfDeposits = 0; 
        this.numberOfWithdrawals = 0; 
    } 

// Calculate the interest. 
    protected void calcInterest() { 
        double monthlyInterestRate; 
        double monthlyInterest; 

        monthlyInterestRate = this.annualInterest / 12; 
        monthlyInterest = this.balance * monthlyInterestRate; 
        this.balance = this.balance + monthlyInterest;  
    } 

// Withdraw. 
    public boolean withdraw(double amount) { 
        if ((this.balance > amount) && (amount > 0)) 
        { 
            this.balance -= amount; 
            this.numberOfWithdrawals++; 
            return true; 
        } else { 
        return false; 
        } 
    } 

// Deposit 
    public boolean deposit(double amount) { 
        if (amount > 0) 
        { 
            this.balance += amount; 
            this.numberOfDeposits++; 
            return true; 
        } else { 
        return false; 
        } 
    } 

// Accessors and mutators. 
    public double getBalance() { 
        return balance; 
    } 

    public void setBalance(double balance) { 
        this.balance = balance; 
    } 

    public int getNumDepositsThisMonth() { 
        return numberOfDeposits; 
    } 

    public void setNumDepositsThisMonth(int numDepositsThisMonth) { 
        this.numberOfDeposits = numDepositsThisMonth; 
    } 

    public double getAnnualInterest() { 
        return annualInterest; 
    } 

    public void setAnnualInterest(double annualInterest) { 
        this.annualInterest = annualInterest; 
    } 

    public double getMonthlyCharge() { 
        return monthlyCharge; 
    } 

    public void setMonthlyCharge(double monthlyCharge) { 
        this.monthlyCharge = monthlyCharge; 
    } 
    public boolean getIsActive() { 
// TODO Auto-generated method stub 
    return (Boolean) null; 
    } 
} 
    
    public static class SavingsAccount extends BankAccount { 
    protected boolean isActive = (super.balance > 25); 

    // Constructors 
    public SavingsAccount() { 
        super(); 
    } 
    public SavingsAccount(double balance, double annualInterest) { 
        super(balance, annualInterest); 
    } 

    public double getMonthlyCharge() { 
        this.monthlyProcess(); 
        return monthlyCharge; 
    } 

    // Monthly charge process. 
    public void monthlyProcess() { 
        if (super.numberOfWithdrawals > 4) { 
        super.monthlyCharge += super.numberOfWithdrawals - 4; 
            if (super.balance < 25) { 
                this.isActive = false; 
            } 
        } 
    }   

    // Withdraw. 
    public boolean withdraw(double amount) { 
        if (isActive) { 
            return super.withdraw(amount); 
        } else { 
            return false; 
        } 
    } 

    // Deposit 
    public boolean deposit(double amount) { 
        super.deposit(amount); 
        if ((!this.isActive) && super.balance > 25) { 
            this.isActive = true; 
            return true; 
        } else { 
        return false; 
        } 

    } 

    public boolean getIsActive() { 
        return isActive; 
    } 
    public void setActive(boolean isActive) { 
        this.isActive = isActive; 
    } 
} 

    public static void main(String[] args) { 
        double balance = 0; 
        double annualInterest = 0; 
        String output; 
        String input; 
        DecimalFormat df = new DecimalFormat("#0.00"); 

        do { 
        try { 
        output = "Enter your account balance $:"; 
        input = JOptionPane.showInputDialog(output); 

        balance = Double.parseDouble(input); 
        if (balance < 0) { 
            throw new NumberFormatException(); 
            } 
                 break; 
            }   catch (HeadlessException e) { 
                errorMsg(); 
            }   catch (NumberFormatException e) { 
                errorMsg(); 
            } 
        } while (true); 

        do { 
            try { 
                output = "Please enter your annual interest rate: \n" 
                + "EXAMPLE: A 4% interst rate is 0.04"; 
                input = JOptionPane.showInputDialog(output); 

                annualInterest = Double.parseDouble(input); 
                if (annualInterest < 0) { 
                throw new NumberFormatException(); 
                } 
                break; 
                } catch (HeadlessException e) { 
                    errorMsg(); 
                } catch (NumberFormatException e) { 
                    errorMsg(); 
                } 
            } while (true); 

    // Instantiate your object. 
    BankAccount savings = new SavingsAccount(balance, annualInterest); 

    do { 
        try { 
            output = "Enter the number of withdrawals:"; 
            input = JOptionPane.showInputDialog(output); 

            savings.numberOfWithdrawals = Integer.parseInt(input); 
            if (savings.numberOfWithdrawals < 0) { 
            throw new NumberFormatException(); 
            } 
            break; 
            } catch (HeadlessException e) { 
                errorMsg(); 
            } catch (NumberFormatException e) { 
            errorMsg(); 
            } 
        } while (true); 

        do { 
            try { 
                output = "Enter the number of deposits:"; 
                input = JOptionPane.showInputDialog(output); 

                savings.numberOfDeposits = Integer.parseInt(input); 
                if (savings.numberOfDeposits < 0) { 
                throw new NumberFormatException(); 
                } 
                    break; 
                } catch (HeadlessException e) { 
                    errorMsg(); 
                } catch (NumberFormatException e) { 
                    errorMsg(); 
                } 
            } while (true); 

    // Add the interest to the balance: 
    savings.calcInterest(); 

    output = "Account Balance with Interest: $" + df.format(savings.getBalance()); 
    output += "\nMonthly Charge that will be deducted: $" + df.format(savings.getMonthlyCharge()); 
    output += "\nAccount Status: "; 
    output += savings.getIsActive() ? "Is Active" : "Not Active"; 

    JOptionPane.showMessageDialog(null, output); 

    } 

    private static void errorMsg() { 
        String output; 
        output = "Error: There was an error with your entry"; 
        JOptionPane.showMessageDialog(null, output); 
    } 

}

# UTS-PBO-1
UTS PBO soal 4

Class Course
public class Course
{
   private String courseName;      // Name of the course
   private Instructor instructor;  // The instructor
   private TextBook textBook;         


   public Course(String name, Instructor instr,
                 TextBook text)
   {
      // Assign the courseName.
      courseName = name;
      
      // Create a new Instructor object, passing
      // instr as an argument to the copy constructor.
      instructor = instr;

      // Create a new TextBook object, passing
      // text as an argument to the copy constructor.
      textBook = text;
   }

   /**
    * getName method
    */
   
   public String getName()
   {
      return courseName;
   }
   
   /**
    * getInstructor method
    */
   
   public Instructor getInstructor()
   {
      // Return a copy of the instructor object.
      return instructor;
   }

   /**
    * getTextBook method 
    */
   
   public TextBook getTextBook()
   {
      // Return a copy of the textBook object.
      return textBook;
   }
   
 /**
    * The toString method returns a string containing 
    * the course information.
    */

   public String toString()
   {
      // Create a string representing the object.
      String str = "Course name: " + courseName
                   + "\nInstructor Information:\n"
                   + instructor
                   + "\nTextbook Information:\n"
                   + textBook;

      // Return the string.
      return str;
   }
}

Class CourseDemo
public class CourseDemo
{
   public static void main(String[] args)
   {
      // Create an Instructor object.
      Instructor myInstructor =
          new Instructor("Shibghotur", "Ayu", "18051214068");
      
      // Create a TextBook object.
      TextBook myTextBook =
          new TextBook("Rantau 1 Muara",
                       "A. Fuadi", "Gramedia");
                       
      // Create a Course object.
      Course myCourse = 
         new Course("Pemrograman Berorientasi Obyek", myInstructor,
                    myTextBook);
      
      // Display the course information.
      System.out.println(myCourse);
   }
}

Class TextBook
public class TextBook
{
   private String title,     // Title of the book
                  author,    // Author's last name
                  publisher; // Name of publisher

   /**
    * This constructor accepts arguments for the   
    * title, author, and publisher.
    */

   public TextBook(String textTitle, String auth,
                   String pub)
   {
      title = textTitle;
      author = auth;
      publisher = pub;
   }
 /**
    * The toString method returns a string containing 
    * the textbook information. 
    */

   public String toString()
   {
      // Create a string representing the object.
      String str = "Title: " + title
                   + "\nAuthor: " + author
                   + "\nPublisher: " + publisher;

      // Return the string.
      return str;
   }
}

Class Instructor
public class Instructor
{
   private String lastName,     // Last name   
                  firstName,    // First name
                  officeNumber; // Office number

   /**
    * This constructor accepts arguments for the   
    * last name, first name, and office number.
    */

   public Instructor(String lname, String fname,
                     String office)
   {
      lastName = lname;
      firstName = fname;
      officeNumber = office;
   }

   

   /**
    * The set method sets each field. 
    */
   
   public void set(String lname, String fname,
                   String office)
   {
      lastName = lname;
      firstName = fname;
      officeNumber = office;
   }
   
   /**
    * The toString method returns a string containing 
    * the instructor information.
    */

   public String toString()
   {
      // Create a string representing the object.
      String str = "Last Name: " + lastName
                   + "\nFirst Name: " + firstName
                   + "\nOffice Number: " + officeNumber;

      // Return the string.
      return str;
   }
} 
